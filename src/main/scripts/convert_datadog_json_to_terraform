#!/usr/bin/env python3

"""
Script used to convert a datadog monitor/timeboard/screenboard/etc... .json file into a terraform .tf file.
"""

import argparse
import json
import logging

from rush.dd2tf.monitor import Monitor


def __create_logger(verbose: bool) -> logging.Logger:
    logger = logging.getLogger(__name__)
    logging_level = logging.DEBUG if verbose else logging.INFO
    logger.setLevel(logging_level)

    stream_handler = logging.StreamHandler()
    stream_handler.setLevel(logging_level)
    logger.addHandler(stream_handler)

    return logger


def __parse_args():
    parser = argparse.ArgumentParser(description="Generate Terraform Content from Datadog Json")
    parser.add_argument("type", choices=["monitor"], help="The type of datadog object the json represents.")
    parser.add_argument("json", type=str, help="The Datadog Json to be converted.")
    parser.add_argument("-v", "--verbose", action="store_true", help="Verbose output for the script.")

    return parser.parse_args()


def main():
    """
    Main function used to convert a json file into a terraform file.
    """
    args = __parse_args()
    logger = __create_logger(args.verbose)

    datadog_json = json.loads(args.json)
    datadog_type = args.type
    logger.info(f"Converting Json of type {datadog_type}...")
    if datadog_type == "monitor":
        logger.debug(f"Using - {json.dumps(datadog_json, indent=4, sort_keys=True)} to create a monitor.")
        print(Monitor(datadog_json).to_terraform())
    logger.info("Converted Json to Terraform")


if __name__ == "__main__":
    main()
